name: Wanderlust Reusable CI/CD

on:
  workflow_call:
    inputs:
      role-assume:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string
      ECR_BACKEND_REPO:
        required: true
        type: string
      ECR_FRONTEND_REPO:
        required: true
        type: string
      runner:
        required: false
        type: string
        default: "ubuntu-latest"
      BACKEND_TASK_DEFINITION:
        required: true
        type: string      
      FRONTEND_TASK_DEFINITION:
        required: true
        type: string  
      BACKEND_SERVICE:
        required: true
        type: string
      FRONTEND_SERVICE:
        required: true
        type: string
      CLUSTER:
        required: true
        type: string
permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  build-and-push:
    name: "BUILD"
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.role-assume }}
          role-session-name: actionssession
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2
            
      - name: Build and push backend image
        id: build-backend
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPO: ${{ inputs.ECR_BACKEND_REPO }}
        run: |
           LATEST_TAG=$(aws ecr describe-images --repository-name $ECR_REPO \
           --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' \
           --output text 2>/dev/null)
           echo "LATEST_TAG output: $LATEST_TAG"
           
            if [[ -z "$LATEST_TAG" || "$LATEST_TAG" == "None" || "$LATEST_TAG" == "null" ]]; then
              NEW_TAG="v1"
            else
              VERSION_NUM=$(echo "$LATEST_TAG" | grep -oE '[0-9]+$')
              if [[ -z "$VERSION_NUM" ]]; then
                NEW_TAG="v1"
              else  
                NEW_TAG="v$((VERSION_NUM + 1))"
              fi
            fi

            echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
            echo "Latest tag: $LATEST_TAG"
            echo "New tag: $NEW_TAG"
            FULL_IMAGE_URI="$ECR_REGISTRY/$ECR_REPO:$TAG"
            docker build -t "$FULL_IMAGE_URI" -f backend/Dockerfile /backend 
            docker push "$FULL_IMAGE_URI" 
            echo "backend_image_uri=$FULL_IMAGE_URI" >> $GITHUB_OUTPUT
            
      - name: Build and push frontend image
        id: build-frontend
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPO: ${{ inputs.ECR_FRONTEND_REPO }}
        run: |
           LATEST_TAG=$(aws ecr describe-images --repository-name $ECR_FRONTEND_REPO \
           --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' \
           --output text 2>/dev/null)
           echo "LATEST_TAG output: $LATEST_TAG"
           
            if [[ -z "$LATEST_TAG" || "$LATEST_TAG" == "None" || "$LATEST_TAG" == "null" ]]; then
              NEW_TAG="v1"
            else
              VERSION_NUM=$(echo "$LATEST_TAG" | grep -oE '[0-9]+$')
              if [[ -z "$VERSION_NUM" ]]; then
                NEW_TAG="v1"
              else  
                NEW_TAG="v$((VERSION_NUM + 1))"
              fi
            fi

            echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
            echo "Latest tag: $LATEST_TAG"
            echo "New tag: $NEW_TAG"
            FULL_IMAGE_URI="$ECR_REGISTRY/$ECR_REPO:$TAG"
            docker build -t "$FULL_IMAGE_URI" -f frontend/Dockerfile /frontend 
            docker push "$FULL_IMAGE_URI" 
            echo "frontend_image_uri=$ECR_REGISTRY/$ECR_REPO:$NEW_TAG" >> $GITHUB_OUTPUT
    outputs:
      backend_image_uri: ${{ steps.build-backend.outputs.backend_image_uri }}
      frontend_image_uri: ${{ steps.build-frontend.outputs.frontend_image_uri }}
      
  deploy:
    name: "DEPLOY"
    needs: build-and-push
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.role-assume }}
          role-session-name: actionssession
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2 
      
      - name: Fetch Backend Task Definition from ECS
        run: |
          aws ecs describe-task-definition \
          --task-definition ${{ inputs.BACKEND_TASK_DEFINITION }} \
          --query "taskDefinition" \
          --output json | jq -c > backend-task-definition.json

      - name: Fill new Backend image to Task definition
        id: backend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: backend-task-definition.json
          container-name: "wanderlust-backend"
          image: ${{ needs.build-and-push.outputs.backend_image_uri }}

      - name: Deploy Backend to AWS ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.backend-task-def.outputs.task-definition }}
          service: ${{ inputs.BACKEND_SERVICE }}
          cluster: ${{ inputs.CLUSTER }}
          wait-for-service-stability: true

      - name: Fetch Frontend Task Definition from ECS
        run: |
          aws ecs describe-task-definition \
          --task-definition ${{ inputs.FRONTEND_TASK_DEFINITION }} \
          --query "taskDefinition" \
          --output json | jq -c > frontend-task-definition.json

      - name: Fill new Frontend image to Task definition
        id: frontend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: frontend-task-definition.json
          container-name: "wanderlust-frontend"
          image: ${{ needs.build-and-push.outputs.frontend_image_uri }}

      - name: Deploy Frontend to AWS ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.frontend-task-def.outputs.task-definition }}
          service: ${{ inputs.FRONTEND_SERVICE }}
          cluster: ${{ inputs.CLUSTER }}
          wait-for-service-stability: true
