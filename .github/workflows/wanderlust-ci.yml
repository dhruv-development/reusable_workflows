name: Build and Push Docker Images

on:
  workflow_call:
    inputs:
      role-assume:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string
      ECR_MONGO_REPO:
        required: true
        type: string
      ECR_REDIS_REPO:
        required: true
        type: string
      ECR_BACKEND_REPO:
        required: true
        type: string
      ECR_FRONTEND_REPO:
        required: true
        type: string
      runner:
        required: false
        type: string
        default: "ubuntu-latest"
      MONGO_TASK_DEFINITION:
        required: true
        type: string
      REDIS_TASK_DEFINITION:
        required: true
        type: string
      BACKEND_TASK_DEFINITION:
        required: true
        type: string      
      FRONTEND_TASK_DEFINITION:
        required: true
        type: string  
      MONGO_SERVICE:
        required: true
        type: string
      REDIS_SERVICE:
        required: true
        type: string
      BACKEND_SERVICE:
        required: true
        type: string
      FRONTEND_SERVICE:
        required: true
        type: string
      CLUSTER:
        required: true
        type: string
permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  build-and-push:
    name: "BUILD"
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.role-assume }}
          role-session-name: actionssession
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push mongo image
        id: build-mongo
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPO: ${{ inputs.ECR_MONGO_REPO }}
        run: |
          TAG=$(date +%Y-%m-%d-%H-%M-%S)
          FULL_IMAGE_URI="$ECR_REGISTRY/$ECR_REPO:$TAG" 
          docker build -t "$FULL_IMAGE_URI" -f database/Dockerfile database/
          docker push "$FULL_IMAGE_URI"
          echo "mongo_image_uri=$FULL_IMAGE_URI" >> $GITHUB_OUTPUT 
    
      - name: Build and push redis image
        id: build-redis
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPO: ${{ inputs.ECR_REDIS_REPO }}
        run: |
          TAG=$(date +%Y-%m-%d-%H-%M-%S)
          FULL_IMAGE_URI="$ECR_REGISTRY/$ECR_REPO:$TAG" 
          docker build -t "$FULL_IMAGE_URI" -f redis/Dockerfile .
          docker push "$FULL_IMAGE_URI"
          echo "redis_image_uri=$FULL_IMAGE_URI" >> $GITHUB_OUTPUT
            
      - name: Build and push backend image
        id: build-backend
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPO: ${{ inputs.ECR_BACKEND_REPO }}
        run: |
          TAG=$(date +%Y-%m-%d-%H-%M-%S)
          FULL_IMAGE_URI="$ECR_REGISTRY/$ECR_REPO:$TAG"
          docker build -t "$FULL_IMAGE_URI" -f backend/Dockerfile backend/
          docker push "$FULL_IMAGE_URI"
          echo "backend_image_uri=$FULL_IMAGE_URI" >> $GITHUB_OUTPUT
            
      - name: Build and push frontend image
        id: build-frontend
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPO: ${{ inputs.ECR_FRONTEND_REPO }}
        run: |
          TAG=$(date +%Y-%m-%d-%H-%M-%S)
          FULL_IMAGE_URI="$ECR_REGISTRY/$ECR_REPO:$TAG"
          docker build -t "$FULL_IMAGE_URI" -f frontend/Dockerfile frontend/
          docker push "$FULL_IMAGE_URI"
          echo "frontend_image_uri=$FULL_IMAGE_URI" >> $GITHUB_OUTPUT
    outputs:
      # mongo_image_tag: ${{ steps.build-mongo.outputs.mongo_tag }}
      mongo_image_uri: ${{ steps.build-mongo.outputs.mongo_image_uri }}
      redis_image_uri: ${{ steps.build-redis.outputs.redis_image_uri }}
      backend_image_uri: ${{ steps.build-backend.outputs.backend_image_uri }}
      frontend_image_uri: ${{ steps.build-frontend.outputs.frontend_image_uri }}
      # redis_image_tag: ${{ steps.build-redis.outputs.redis_tag }}
      # backend_image_tag: ${{ steps.build-backend.outputs.backend_tag }}
      # frontend_image_tag: ${{ steps.build-frontend.outputs.frontend_tag }}
      
  deploy:
    name: "DEPLOY"
    needs: build-and-push
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.role-assume }}
          role-session-name: actionssession
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2 # Added this to get the registry

      # Mongo Deployment
      - name: Fetch Mongo Task Definition from ECS
        run: |
          aws ecs describe-task-definition \
          --task-definition ${{ inputs.MONGO_TASK_DEFINITION }} \
          --query "taskDefinition" \
          --output json | jq -c > mongo-task-definition.json

      - name: Fill new Mongo image to Task definition
        id: mongo-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: mongo-task-definition.json
          container-name: "mongodb"
          image: ${{ needs.build-and-push.outputs.mongo_image_uri }}

      - name: Deploy Mongo to AWS ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.mongo-task-def.outputs.task-definition }}
          service: ${{ inputs.MONGO_SERVICE }}
          cluster: ${{ inputs.CLUSTER }}
          wait-for-service-stability: true

      # Redis Deployment
      - name: Fetch Redis Task Definition from ECS
        run: |
          aws ecs describe-task-definition \
          --task-definition ${{ inputs.REDIS_TASK_DEFINITION }} \
          --query "taskDefinition" \
          --output json | jq -c > redis-task-definition.json

      - name: Fill new Redis image to Task definition
        id: redis-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: redis-task-definition.json
          container-name: "redis"
          image: ${{ needs.build-and-push.outputs.redis_image_uri }}

      - name: Deploy Redis to AWS ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.redis-task-def.outputs.task-definition }}
          service: ${{ inputs.REDIS_SERVICE }}
          cluster: ${{ inputs.CLUSTER }}
          wait-for-service-stability: true

      # Backend Deployment
      - name: Fetch Backend Task Definition from ECS
        run: |
          aws ecs describe-task-definition \
          --task-definition ${{ inputs.BACKEND_TASK_DEFINITION }} \
          --query "taskDefinition" \
          --output json | jq -c > backend-task-definition.json

      - name: Fill new Backend image to Task definition
        id: backend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: backend-task-definition.json
          container-name: "wanderlust-backend"
          image: ${{ needs.build-and-push.outputs.backend_image_uri }}

      - name: Deploy Backend to AWS ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.backend-task-def.outputs.task-definition }}
          service: ${{ inputs.BACKEND_SERVICE }}
          cluster: ${{ inputs.CLUSTER }}
          wait-for-service-stability: true

      # Frontend Deployment
      - name: Fetch Frontend Task Definition from ECS
        run: |
          aws ecs describe-task-definition \
          --task-definition ${{ inputs.FRONTEND_TASK_DEFINITION }} \
          --query "taskDefinition" \
          --output json | jq -c > frontend-task-definition.json

      - name: Fill new Frontend image to Task definition
        id: frontend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: frontend-task-definition.json
          container-name: "wanderlust-frontend"
          image: ${{ needs.build-and-push.outputs.frontend_image_uri }}

      - name: Deploy Frontend to AWS ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.frontend-task-def.outputs.task-definition }}
          service: ${{ inputs.FRONTEND_SERVICE }}
          cluster: ${{ inputs.CLUSTER }}
          wait-for-service-stability: true
